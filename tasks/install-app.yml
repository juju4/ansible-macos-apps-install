---
## inspired from https://github.com/MWGriffin/ansible-playbooks/blob/master/install/dmg.yaml
## MIT License, Copyright (c) 2013 Michael Griffin, http://mwgriffin.com

## Note: some app are not installing here

- name: Define app name to
  ansible.builtin.set_fact:
    app_basename: "{{ app_name }}.app"
  when:
    - app_name is defined
    - app_name | length > 0

- name: Define Package Path
  ansible.builtin.set_fact:
    pkg_path: "{{ install_archives | expanduser }}/{{ app_archive }}"

- name: Define installer name
  ansible.builtin.set_fact:
    app_basename: "{{ installer_name }}"
  when:
    - installer_name is defined
    - installer_name | length > 0

- name: Get properties of destination
  ansible.builtin.stat:
    path: "{{ dest }}"
  register: dest_properties
- name: Check if app_name exists in dest
  ansible.builtin.stat:
    path: "{{ dest }}/{{ app_name }}.app"
  register: app
  when: version | string and (dest_properties.stat.isdir is defined and dest_properties.stat.isdir)
- name: Check if dest exists - custom to'
  ansible.builtin.stat:
    path: "{{ dest }}"
  register: app2
  when: version | string and dest != '/Applications'
- name: Debug | app2
  ansible.builtin.debug:
    var: app2
    verbosity: 1

- name: Debug | archives path
  ansible.builtin.debug:
    msg: "Archives Path: {{ install_archives }}'"
  when: verbose | bool
- name: Debug | package name
  ansible.builtin.debug:
    msg: "Package Name: {{ app_archive }}'"
  when: verbose | bool
- name: Debug | package path
  ansible.builtin.debug:
    msg: "Package Path: {{ pkg_path }}'"
  when: verbose | bool

- name: INFO
  ansible.builtin.debug:
    msg: "The desired version for '{{ app_name }}' is '{{ version }}'"
  when: version | length > 0

- name: INFO
  ansible.builtin.debug:
    msg: "The desired version for '{{ app_name }}' was not specified. Will overwrite any existing version"
  when: version | length <= 0

- name: INFO
  ansible.builtin.debug:
    msg: "'{{ app_basename }}' does not exist in '{{ dest }}'. '{{ app_name }}' will be installed"
  when:
    - version | length > 0
    - app.stat.exists is defined and not app.stat.exists
    - (app2.stat.exists is not defined or (app2.stat.exists is defined and not app2.stat.exists))

- name: Import macos-apps-version
  ansible.builtin.include_tasks: macos-apps-version.yml
  vars:
    version_app_path: "{{ dest }}/{{ app_basename }}"
    version_app_cmd: "{{ versioncmd }}"
    version_app_default: "0.01"
    version_app_plist_tag: "{{ plist_tag }}"
  when:
    - version | length > 0
    - ((app.stat.exists is defined and app.stat.exists) or (app.skipped is defined and app.skipped))
    - (app2.stat.exists is not defined or (app2.stat.exists is defined and not app2.stat.exists))

- name: Debug | verbose
  when:
    - verbose | bool
    - version | length > 0 and (
        app is defined and app.stat is defined and app.stat.exists
      )
  block:
    - name: Required version
      ansible.builtin.debug:
        var: version

    - name: Current version
      ansible.builtin.debug:
        var: currentversion|default('')

    - name: Versions comparison
      ansible.builtin.debug:
        var: "{{ version is version(currentversion, '>') | string }}"

- name: Already up-to-date!
  ansible.builtin.debug:
    msg: "Application {{ app_name }} already up-to-date (Current {{ currentversion }} >= Desired {{ version }})"
  when:
    - app.stat.exists is defined and app.stat.exists
    - version | length > 0 and version is version( currentversion, '<=')

- name: Download macOS App archive {{ app_archive }}
  ansible.builtin.get_url:
    url: "{{ app_url }}"
    dest: "{{ pkg_path }}"
    mode: '0644'
    validate_certs: "{{ validate_certs }}"
    checksum: "{{ checksum | default(omit) }}"
    tmp_dest: /tmp/
  vars:
    ansible_python_interpreter: python3
  register: dl_result
  until: dl_result is success
  when: >
    (
      app.stat.exists is defined and not app.stat.exists and
      (
        app2.stat.exists is not defined or (app2.stat.exists is defined and not app2.stat.exists)
      )
    )
    or not (version | length > 0)
    or (currentversion is defined and version is version( currentversion, '>'))

- name: Import archive-install
  ansible.builtin.import_tasks: archive-install.yml
  when: >
    (
      app.stat.exists is defined and not app.stat.exists and
      (
        app2.stat.exists is not defined or (app2.stat.exists is defined and not app2.stat.exists)
      )
    )
    or not (version | length > 0)
    or (currentversion is defined and version is version( currentversion, '>'))
